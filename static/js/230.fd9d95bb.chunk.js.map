{"version":3,"file":"static/js/230.fd9d95bb.chunk.js","mappings":"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","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/LoginForm/LoginForm.styled.jsx","schema/shemaRegister.jsx","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Login/Login.styled.jsx","pages/Login/Login.jsx","variables/colors/colors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerBox = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  width: 320px;\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    min-width: 1200px;\n  }\n`;\n","import { ContainerBox } from './Container.styled';\n\nexport default function Container({ children }) {\n  return <ContainerBox>{children}</ContainerBox>;\n}\n","import styled, { keyframes } from 'styled-components';\nimport COLORS from 'variables/colors/colors';\nimport { Field } from 'formik';\nimport { fadeInLeft, fadeInRight } from 'react-animations';\n\nconst animation2 = keyframes`${fadeInLeft}`;\nconst animation3 = keyframes`${fadeInRight}`;\n\nexport const FormBox = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 240px;\n  padding: 40px 20px;\n  background-color: #ffffff;\n  box-shadow: 5px 10px 20px rgba(170, 178, 197, 0.4);\n  border-radius: 30px;\n\n  @media screen and (min-width: 768px) {\n    width: 260px;\n    padding: 56px 83px;\n  }\n`;\n\nexport const Google = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 9px;\n  animation: 1s ${animation2};\n`;\n\nexport const TitleGoogle = styled.p`\n  font-weight: 400;\n  margin-bottom: 16px;\n  font-size: 12px;\n  line-height: 1.17;\n  text-align: center;\n  letter-spacing: 0.04em;\n  color: ${COLORS.textColor};\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 25px;\n  }\n`;\n\nexport const ButtonGoogle = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 122px;\n  height: 40px;\n  margin-bottom: 32px;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.14x;\n  letter-spacing: 0.02em;\n  color: ${COLORS.blackColor};\n  background-color: ${COLORS.backgroungColor};\n  border-radius: 26px;\n  border: none;\n  box-shadow: 1px 3px 7px rgba(170, 178, 197, 0.4);\n  transition: box-shadow 400ms ease-in-out;\n\n  :hover,\n  :focus {\n    box-shadow: 1px 3px 7px rgba(119, 125, 138, 0.466);\n  }\n`;\n\nexport const Title = styled.p`\n  font-weight: 400;\n  margin-bottom: 16px;\n  font-size: 12px;\n  line-height: 1.17;\n  letter-spacing: 0.04em;\n  color: ${COLORS.textColor};\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 25px;\n  }\n`;\n\nexport const TextGoogle = styled.p`\n  margin-left: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  animation: 1s ${animation3};\n`;\n\nexport const LabelText = styled.label`\n  margin-bottom: 16px;\n  font-size: 10px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${COLORS.blackColor};\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: 17px 19px;\n  border: none;\n  outline: none;\n  border-radius: 30px;\n  background-color: ${COLORS.backgroungColor};\n`;\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin-top: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 116px;\n  height: 44px;\n  border: none;\n  border-radius: 16px;\n  box-shadow: 1px 3px 7px rgba(170, 178, 197, 0.4);\n  background-color: ${COLORS.backgroungColor};\n  color: ${COLORS.textColor};\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 1.17;\n  letter-spacing: 0.02em;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 400ms ease-in-out, color 400ms ease-in-out,\n    box-shadow 400ms ease-in-out;\n  animation: 1s ${animation2};\n\n  :hover,\n  :focus {\n    background-color: ${COLORS.activeColor};\n    color: ${COLORS.whiteColor};\n    box-shadow: 1px 3px 7px rgba(255, 119, 8, 0.4);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 122px;\n  }\n`;\nexport const Error = styled.div`\n  position: relative;\n  margin-top: -15px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n  font-size: 10px;\n  letter-spacing: 0.04em;\n  color: #eb5757;\n\n  ::before {\n    position: absolute;\n    top: -81px;\n    left: -25px;\n    content: '*';\n  }\n`;\n","import * as yup from 'yup';\n\nconst schemaRegister = yup.object().shape({\n  email: yup.string().required('This is a required field'),\n  password: yup\n    .string()\n    .required('This is a required field')\n    .min(6, 'min 6 symbols'),\n});\n\nexport default schemaRegister;\n","import { Formik, ErrorMessage, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  ButtonGoogle,\n  ButtonGroup,\n  Button,\n  FormBox,\n  Google,\n  Input,\n  Label,\n  LabelText,\n  TextGoogle,\n  Title,\n  TitleGoogle,\n  Error,\n} from './LoginForm.styled';\nimport { FcGoogle } from 'react-icons/fc';\nimport { logIn } from 'redux/auth/authOperations';\nimport schemaRegister from 'schema/shemaRegister';\n\nexport const LoginForm = ({ onRegistrationClick }) => {\n  const dispatch = useDispatch();\n  const initialValues = { email: '', password: '' };\n\n  const handleSubmit = (initialValues, { resetForm }) => {\n    dispatch(logIn(initialValues));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        onSubmit={handleSubmit}\n        validationSchema={schemaRegister}\n        initialValues={initialValues}\n      >\n        <Form>\n          <FormBox>\n            <Google>\n              <TitleGoogle>\n                You can log in with your Google Account:\n              </TitleGoogle>\n              <ButtonGoogle>\n                <FcGoogle size={18} />\n                <TextGoogle>Google</TextGoogle>\n              </ButtonGoogle>\n            </Google>\n\n            <Title>\n              Or log in using an email and password, after registering:\n            </Title>\n            <Label>\n              <LabelText>Email:</LabelText>\n              <Input type=\"email\" name=\"email\" placeholder=\"your@email.com\" />\n            </Label>\n            <ErrorMessage name=\"email\" render={msg => <Error>{msg}</Error>} />\n            <Label>\n              <LabelText>Password:</LabelText>\n              <Input type=\"password\" name=\"password\" placeholder=\"Password\" />\n            </Label>\n            <ErrorMessage\n              name=\"password\"\n              render={msg => <Error>{msg}</Error>}\n            />\n            <ButtonGroup>\n              <Button>Log in</Button>\n              <Button type=\"button\" onClick={onRegistrationClick}>\n                Registration\n              </Button>\n            </ButtonGroup>\n          </FormBox>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import styled, { keyframes } from 'styled-components';\nimport COLORS from 'variables/colors/colors';\nimport { Field } from 'formik';\nimport { fadeInLeft, fadeInRight } from 'react-animations';\n\nconst animation2 = keyframes`${fadeInLeft}`;\nconst animation3 = keyframes`${fadeInRight}`;\n\nexport const FormBox = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 240px;\n  padding: 40px 20px;\n  background-color: #ffffff;\n  box-shadow: 5px 10px 20px rgba(170, 178, 197, 0.4);\n  border-radius: 30px;\n\n  @media screen and (min-width: 768px) {\n    width: 260px;\n    padding: 56px 83px;\n  }\n`;\n\nexport const Title = styled.p`\n  font-weight: 400;\n  margin-bottom: 16px;\n  font-size: 12px;\n  line-height: 1.17;\n  letter-spacing: 0.04em;\n  color: ${COLORS.textColor};\n  animation: 1s ${animation2};\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 25px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  animation: 1s ${animation3};\n`;\n\nexport const LabelText = styled.label`\n  margin-bottom: 16px;\n  font-size: 10px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${COLORS.blackColor};\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: 17px 19px;\n  border: none;\n  outline: none;\n  border-radius: 30px;\n  background-color: ${COLORS.backgroungColor};\n`;\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin-top: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 116px;\n  height: 44px;\n  border: none;\n  border-radius: 16px;\n  box-shadow: 1px 3px 7px rgba(170, 178, 197, 0.4);\n  background-color: ${COLORS.backgroungColor};\n  color: ${COLORS.textColor};\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 1.17;\n  letter-spacing: 0.02em;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 400ms ease-in-out, color 400ms ease-in-out,\n    box-shadow 400ms ease-in-out;\n  animation: 1s ${animation2};\n\n  :hover,\n  :focus {\n    background-color: ${COLORS.activeColor};\n    color: ${COLORS.whiteColor};\n    box-shadow: 1px 3px 7px rgba(255, 119, 8, 0.4);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 122px;\n  }\n`;\nexport const Error = styled.div`\n  position: relative;\n  margin-top: -15px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n  font-size: 10px;\n  letter-spacing: 0.04em;\n  color: #eb5757;\n\n  ::before {\n    position: absolute;\n    top: -81px;\n    left: -25px;\n    content: '*';\n  }\n`;\n","import { Formik, ErrorMessage, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  ButtonGroup,\n  Button,\n  FormBox,\n  Input,\n  Label,\n  LabelText,\n  Title,\n  Error,\n} from './RegisterForm.styled';\nimport { logIn } from 'redux/auth/authOperations';\nimport schemaRegister from 'schema/shemaRegister';\n\nexport const RegisterForm = ({ onBackToLogin }) => {\n  const dispatch = useDispatch();\n  const initialValues = { email: '', password: '' };\n\n  const handleSubmit = (initialValues, { resetForm }) => {\n    dispatch(logIn(initialValues));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        onSubmit={handleSubmit}\n        validationSchema={schemaRegister}\n        initialValues={initialValues}\n      >\n        <Form>\n          <FormBox>\n            <Title>\n              Please, enter your email and create a password OR back to login:\n            </Title>\n            <Label>\n              <LabelText>Email:</LabelText>\n              <Input type=\"email\" name=\"email\" placeholder=\"your@email.com\" />\n            </Label>\n            <ErrorMessage name=\"email\" render={msg => <Error>{msg}</Error>} />\n            <Label>\n              <LabelText>Password:</LabelText>\n              <Input type=\"password\" name=\"password\" placeholder=\"Password\" />\n            </Label>\n            <ErrorMessage\n              name=\"password\"\n              render={msg => <Error>{msg}</Error>}\n            />\n            <ButtonGroup>\n              <Button>Sign up</Button>\n              <Button type=\"button\" onClick={onBackToLogin}>\n                Back to login\n              </Button>\n            </ButtonGroup>\n          </FormBox>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n  justify-content: center;\n\n  @media screen and (min-width: 1200px) {\n    justify-content: flex-end;\n  }\n`;\n","import { useState } from 'react';\nimport Container from 'components/Container';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Box } from './Login.styled';\n\nexport default function Login() {\n  const [loginFormNeeded, setLoginFormNeeded] = useState(true);\n  const onRegistrationClick = () => {\n    setLoginFormNeeded(false);\n  };\n\n  const onBackToLogin = () => {\n    setLoginFormNeeded(true);\n  };\n  return (\n    <Container>\n      <Box>\n        {loginFormNeeded ? (\n          <LoginForm onRegistrationClick={onRegistrationClick} />\n        ) : (\n          <RegisterForm onBackToLogin={onBackToLogin} />\n        )}\n      </Box>\n    </Container>\n  );\n}\n","const COLORS = Object.freeze({\n  textColor: '#52555f',\n  borderColor: '#e0e5eb',\n  bgTableTitle: '#F5F6FB',\n  activeColor: '#FF751D',\n  greenColor: '#407946',\n  backgroungColor: '#F6F7FB',\n  blackColor: '#000000',\n  whiteColor: '#FFFFFF',\n  barColor: '#FFDAC0',\n});\n\nexport default COLORS;\n"],"names":["ContainerBox","styled","Container","children","animation2","keyframes","fadeInLeft","animation3","fadeInRight","FormBox","Google","TitleGoogle","COLORS","ButtonGoogle","Title","TextGoogle","Label","LabelText","Input","Field","ButtonGroup","Button","Error","yup","shape","email","required","password","min","LoginForm","onRegistrationClick","dispatch","useDispatch","onSubmit","initialValues","resetForm","logIn","validationSchema","schemaRegister","size","type","name","placeholder","render","msg","onClick","RegisterForm","onBackToLogin","Box","Login","useState","loginFormNeeded","setLoginFormNeeded","Object","freeze","textColor","borderColor","bgTableTitle","activeColor","greenColor","backgroungColor","blackColor","whiteColor","barColor"],"sourceRoot":""}